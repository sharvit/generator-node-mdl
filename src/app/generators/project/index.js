import BaseGenerator from '../base-generator';

const path = require('path');
const chalk = require('chalk');
const commandExists = require('command-exists');
const findUp = require('find-up');
const makeDir = require('make-dir');

export default class extends BaseGenerator {
  /*
    Run Loop
   */

  configuring() {
    if (path.basename(this.destinationRoot()) !== this.options.projectName) {
      return makeDir(this.options.projectName).then(path => {
        this.destinationRoot(path);
        this.log(`\nGenerating a new project in ${chalk.green(path)}\n`);
      });
    }
  }

  writing() {
    const templatesToCopy = [
      { templatePath: '_babelrc', destinationPath: '.babelrc' },
      { templatePath: '_editorconfig', destinationPath: '.editorconfig' },
      { templatePath: '_eslintignore', destinationPath: '.eslintignore' },
      { templatePath: '_eslintrc', destinationPath: '.eslintrc' },
      { templatePath: '_gitattributes', destinationPath: '.gitattributes' },
      { templatePath: '_gitignore', destinationPath: '.gitignore' },
      { templatePath: '_npmignore', destinationPath: '.npmignore' },
      { templatePath: '_package.json', destinationPath: 'package.json' },
      { templatePath: 'license', destinationPath: 'license' },
      { templatePath: 'readme.md', destinationPath: 'readme.md' },
      { templatePath: 'src', destinationPath: 'src' },
    ];

    templatesToCopy.forEach(({ templatePath, destinationPath }) =>
      this.fs.copyTpl(
        this.templatePath(templatePath),
        this.destinationPath(destinationPath),
        this.options
      )
    );
  }

  async install() {
    this._installNpmDeps();
  }

  async end() {
    await this._removeYoRc();

    this._createGit();
  }

  /*
    Private Methods
   */

  _installNpmDeps() {
    const hasYarn = commandExists.sync('yarn');

    this.installDependencies({
      bower: false,
      npm: !hasYarn,
      yarn: hasYarn,
      skipMessage: true,
    });
  }

  _createGit() {
    const { repository } = this.options;

    this.spawnCommandSync('git', ['init', '--quiet']);
    this.spawnCommandSync('git', [
      'remote',
      'add',
      'origin',
      `git@github.com:${repository}.git`,
    ]);
    this.spawnCommandSync('git', ['add', '.']);
    this.spawnCommandSync('git', [
      'commit',
      '-m',
      'chore(init): Generated by generator-node-mdl ğŸ”¥',
      '--quiet',
    ]);
  }

  async _removeYoRc() {
    const yoRC = await findUp('.yo-rc.json');

    if (yoRC) {
      this.fs.delete(yoRC);

      await new Promise((resolve, reject) => {
        this.fs.commit(() => resolve());
      });
    }
  }
}
